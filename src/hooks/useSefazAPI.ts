
import { useMutation } from '@tanstack/react-query'
import { supabase } from '@/integrations/supabase/client'
import { toast } from 'sonner'
import { useToast } from '@/hooks/use-toast'
import { useSearchHistory } from '@/hooks/useSearchHistory'
import { useUserCredits } from '@/hooks/useUserCredits'

interface ProductSearchParams {
  produto: {
    gtin?: string
    descricao?: string
    ncm?: string
    gpc?: string
  }
  estabelecimento: {
    individual?: { cnpj: string }
    municipio?: { codigoIBGE: string }
    geolocalizacao?: {
      latitude: number
      longitude: number
      raio: number
    }
  }
  dias: number
  pagina?: number
  registrosPorPagina?: number
}

interface FuelSearchParams {
  produto: {
    tipoCombustivel: number
  }
  estabelecimento: {
    individual?: { cnpj: string }
    municipio?: { codigoIBGE: string }
    geolocalizacao?: {
      latitude: number
      longitude: number
      raio: number
    }
  }
  dias: number
  pagina?: number
  registrosPorPagina?: number
}

interface SearchResult {
  totalRegistros: number
  totalPaginas: number
  pagina: number
  conteudo: Array<{
    produto: {
      descricao: string
      gtin: string
      unidadeMedida: string
      venda: {
        dataVenda: string
        valorDeclarado: number
        valorVenda: number
      }
    }
    estabelecimento: {
      cnpj: string
      razaoSocial: string
      nomeFantasia: string
      endereco: {
        nomeLogradouro: string
        numeroImovel: string
        bairro: string
        municipio: string
        latitude: number
        longitude: number
      }
    }
  }>
}

// Fun√ß√£o para sanitizar e validar dados antes de enviar
function sanitizePayload(params: any): any {
  console.log('=== SANITIZANDO PAYLOAD NO FRONTEND ===')
  console.log('Dados originais:', JSON.stringify(params, null, 2))

  const sanitized = JSON.parse(JSON.stringify(params))

  // Limpar e validar GTIN
  if (sanitized.produto?.gtin && typeof sanitized.produto.gtin === 'string') {
    sanitized.produto.gtin = sanitized.produto.gtin.replace(/\D/g, '')
    console.log('‚úÖ GTIN sanitizado:', sanitized.produto.gtin)
  }

  // Limpar e validar c√≥digo IBGE (manter como string no frontend, ser√° convertido na Edge Function)
  if (sanitized.estabelecimento?.municipio?.codigoIBGE && typeof sanitized.estabelecimento.municipio.codigoIBGE === 'string') {
    sanitized.estabelecimento.municipio.codigoIBGE = sanitized.estabelecimento.municipio.codigoIBGE.replace(/\D/g, '')
    console.log('‚úÖ C√≥digo IBGE sanitizado:', sanitized.estabelecimento.municipio.codigoIBGE)
  }

  // Limpar e validar CNPJ
  if (sanitized.estabelecimento?.individual?.cnpj && typeof sanitized.estabelecimento.individual.cnpj === 'string') {
    sanitized.estabelecimento.individual.cnpj = sanitized.estabelecimento.individual.cnpj.replace(/\D/g, '')
    console.log('‚úÖ CNPJ sanitizado:', sanitized.estabelecimento.individual.cnpj)
  }

  // Garantir valores padr√£o para campos obrigat√≥rios
  sanitized.dias = sanitized.dias || 7
  sanitized.pagina = sanitized.pagina || 1
  sanitized.registrosPorPagina = sanitized.registrosPorPagina || 100

  console.log('‚úÖ Payload sanitizado:', JSON.stringify(sanitized, null, 2))
  return sanitized
}

// Teste de conectividade aprimorado com diagn√≥stico
async function testConnectivity(): Promise<boolean> {
  console.log('=== TESTANDO CONECTIVIDADE COM EDGE FUNCTION ===')
  
  try {
    const { data, error } = await supabase.functions.invoke('sefaz-api-proxy')

    console.log('=== RESULTADO DO TESTE DE CONECTIVIDADE ===')
    if (error) {
      console.error('‚ùå Erro na conectividade:', error)
      toast.error(`Erro de conectividade: ${error.message}`)
      return false
    }

    console.log('‚úÖ Resposta do health check:', JSON.stringify(data, null, 2))
    
    // Diagn√≥stico detalhado
    if (data?.status === 'healthy') {
      console.log('‚úÖ Edge Function est√° operacional')
      console.log('‚úÖ Token SEFAZ configurado:', data.tokenConfigured)
      console.log('‚úÖ Timestamp:', data.timestamp)
      
      if (!data.tokenConfigured) {
        toast.error('üö® Token SEFAZ n√£o configurado no servidor!')
        return false
      }
      
      toast.success('‚úÖ Conectividade OK! Sistema pronto para buscar.')
      return true
    } else {
      console.error('‚ùå Health check retornou status inv√°lido')
      return false
    }
    
  } catch (error) {
    console.error('‚ùå Erro cr√≠tico no teste de conectividade:', error)
    toast.error(`Erro cr√≠tico: ${error}`)
    return false
  }
}

async function callSefazAPI(endpoint: string, data: any): Promise<SearchResult> {
  console.log('=== INICIANDO CHAMADA PARA SEFAZ API ===')
  console.log('Endpoint:', endpoint)
  console.log('Dados enviados:', JSON.stringify(data, null, 2))

  // Valida√ß√£o rigorosa antes do envio
  if (!endpoint || typeof endpoint !== 'string') {
    throw new Error('Endpoint inv√°lido ou n√£o fornecido');
  }
  
  if (!data || Object.keys(data).length === 0) {
    throw new Error('Dados de busca inv√°lidos ou vazios');
  }

  // Sanitizar dados antes de enviar
  const sanitizedData = sanitizePayload(data)
  
  // Valida√ß√£o final dos dados sanitizados
  if (!sanitizedData || Object.keys(sanitizedData).length === 0) {
    throw new Error('Dados sanitizados resultaram em payload vazio');
  }
  
  const requestBody = { endpoint, payload: sanitizedData };
  
  // Log detalhado para depura√ß√£o no navegador
  console.log(
    '%c[useSefazAPI] Invoking sefaz-api-proxy with body:',
    'color: blue; font-weight: bold;',
    requestBody
  );

  try {
    console.log('üì° Invocando Edge Function para busca real...')
    const { data: result, error } = await supabase.functions.invoke('sefaz-api-proxy', {
      body: requestBody
    })

    console.log('=== RESPOSTA DA EDGE FUNCTION ===')
    if (error) {
      console.error('‚ùå Erro da Edge Function:', error)
      throw new Error(`Erro na comunica√ß√£o: ${error.message}`)
    }

    console.log('‚úÖ Resultado recebido:', JSON.stringify(result, null, 2))

    // Verificar se h√° erro na resposta com diagn√≥stico detalhado
    if (result?.error) {
      console.error('‚ùå Erro retornado pela API:', result.error)
      console.error('üìÑ Detalhes do erro:', result.details)
      console.error('üî¢ Status code:', result.statusCode)
      console.error('üåê URL utilizada:', result.url)
      
      // Diagn√≥stico espec√≠fico para diferentes tipos de erro
      if (result.diagnosis) {
        console.error('üî¨ Diagn√≥stico:', result.diagnosis)
        
        if (result.diagnosis.includes('HTML')) {
          throw new Error('üö® API SEFAZ retornou p√°gina de login - Token pode estar inv√°lido ou expirado')
        }
        
        if (result.diagnosis.includes('Token')) {
          throw new Error('üö® Problema com o token de autentica√ß√£o - Entre em contato com o suporte')
        }
      }
      
      // Mensagens de erro mais espec√≠ficas baseadas no status
      if (result.statusCode === 400) {
        // Verificar se √© erro de tipo inv√°lido para codigoIBGE
        if (result.details?.message?.includes('codigoIBGE')) {
          throw new Error('üö® Erro de tipo no c√≥digo IBGE - Foi aplicada corre√ß√£o autom√°tica, tente novamente')
        }
        throw new Error('Dados inv√°lidos para a busca. Verifique os crit√©rios informados.')
      } else if (result.statusCode === 401) {
        throw new Error('Erro de autentica√ß√£o com a API SEFAZ. Token pode estar expirado.')
      } else if (result.statusCode === 404) {
        throw new Error('Servi√ßo n√£o encontrado na API SEFAZ. Endpoint pode estar incorreto.')
      } else if (result.statusCode === 503) {
        throw new Error('Servi√ßo temporariamente indispon√≠vel. Tente novamente em alguns minutos.')
      } else if (result.statusCode >= 500) {
        throw new Error('Erro interno da API SEFAZ. Tente novamente em alguns minutos.')
      } else {
        throw new Error(result.error || 'Erro desconhecido na busca')
      }
    }

    // Verificar se a resposta tem a estrutura esperada
    if (!result || typeof result !== 'object') {
      console.error('‚ùå Resposta inv√°lida:', result)
      throw new Error('Resposta inv√°lida da API')
    }

    // Se n√£o tem a estrutura padr√£o de resposta, mas tem mensagem, pode ser um caso v√°lido
    if (result.message && !result.conteudo) {
      console.log('‚ÑπÔ∏è Resposta com mensagem especial:', result.message)
      
      // Verificar se √© uma resposta de diagn√≥stico
      if (result.rawResponse) {
        console.log('üî¨ Raw response para an√°lise:', result.rawResponse.substring(0, 200))
      }
      
      // Retornar estrutura vazia mas v√°lida para n√£o quebrar o frontend
      return {
        totalRegistros: result.totalRegistros || 0,
        totalPaginas: result.totalPaginas || 0,
        pagina: result.pagina || 1,
        conteudo: result.conteudo || []
      }
    }

    // Validar estrutura m√≠nima esperada
    const validResult = {
      totalRegistros: result.totalRegistros || 0,
      totalPaginas: result.totalPaginas || 0,
      pagina: result.pagina || 1,
      conteudo: Array.isArray(result.conteudo) ? result.conteudo : []
    }

    console.log('‚úÖ Dados validados e estruturados:', {
      totalRegistros: validResult.totalRegistros,
      totalPaginas: validResult.totalPaginas,
      pagina: validResult.pagina,
      quantidadeItens: validResult.conteudo.length
    })

    return validResult as SearchResult

  } catch (error) {
    console.error('‚ùå Erro na chamada da API:', error)
    throw error
  }
}

export function useProductSearch() {
  const { toast } = useToast()
  const { saveSearch } = useSearchHistory()
  const { consumeCredit, hasCredits, isAdmin } = useUserCredits()

  return useMutation({
    mutationFn: async (params: ProductSearchParams) => {
      console.log('=== INICIANDO BUSCA DE PRODUTOS ===')
      console.log('Par√¢metros recebidos:', JSON.stringify(params, null, 2))
      console.log('üîç Verificando status de admin:', isAdmin)
      
      // Check if user is admin first - admins don't need credit consumption
      if (!isAdmin) {
        console.log('üîç Usu√°rio n√£o √© admin, verificando cr√©ditos...')
        
        // For non-admin users, consume credit
        const creditConsumed = await consumeCredit('Busca de produto')
        if (!creditConsumed) {
          // Check if user has credits for better error message
          if (!hasCredits()) {
            throw new Error('INSUFFICIENT_CREDITS')
          }
          throw new Error('CREDIT_CONSUMPTION_FAILED')
        }
        
        console.log('‚úÖ Cr√©dito processado com sucesso, prosseguindo com busca...')
      } else {
        console.log('‚úÖ Usu√°rio √© admin, pulando verifica√ß√£o de cr√©ditos')
      }

      // Proceed with the search
      
      // Valida√ß√µes mais flex√≠veis
      if (!params.produto.gtin && !params.produto.descricao && !params.produto.ncm) {
        throw new Error('Informe pelo menos um crit√©rio de busca: GTIN, descri√ß√£o ou NCM')
      }

      // Validar GTIN se fornecido
      if (params.produto.gtin && typeof params.produto.gtin === 'string') {
        const gtin = params.produto.gtin.replace(/\D/g, '')
        if (gtin.length < 8 || gtin.length > 14) {
          throw new Error('GTIN deve ter entre 8 e 14 d√≠gitos')
        }
        console.log('‚úÖ GTIN validado:', gtin)
      }

      // Validar c√≥digo IBGE se fornecido
      if (params.estabelecimento.municipio?.codigoIBGE && typeof params.estabelecimento.municipio.codigoIBGE === 'string') {
        const codigo = params.estabelecimento.municipio.codigoIBGE.replace(/\D/g, '')
        if (codigo.length !== 7) {
          throw new Error('C√≥digo IBGE deve ter exatamente 7 d√≠gitos num√©ricos')
        }
        console.log('‚úÖ C√≥digo IBGE validado:', codigo)
      }

      console.log('‚úÖ Valida√ß√µes conclu√≠das, iniciando chamada para API...')
      return callSefazAPI('produto/pesquisa', params)
    },
    onError: (error: Error) => {
      console.error('‚ùå Erro na busca de produtos:', error)
      
      let errorMessage = 'Erro desconhecido na busca'
      
      if (error.message === 'INSUFFICIENT_CREDITS') {
        toast({
          title: "Cr√©ditos Insuficientes",
          description: "Voc√™ n√£o possui cr√©ditos suficientes para realizar esta busca.",
          variant: "destructive",
        })
        return
      } else if (error.message === 'CREDIT_CONSUMPTION_FAILED') {
        toast({
          title: "Erro no Sistema de Cr√©ditos",
          description: "N√£o foi poss√≠vel processar seus cr√©ditos. Tente novamente.",
          variant: "destructive",
        })
        return
      }
      
      // Mensagens espec√≠ficas para diagn√≥sticos cr√≠ticos
      if (error.message.includes('üö®')) {
        errorMessage = error.message // J√° formatada com emoji de alerta
      } else if (error.message.includes('conectar com o servidor')) {
        errorMessage = 'N√£o foi poss√≠vel conectar com o servidor. Verifique sua conex√£o e tente novamente.'
      } else if (error.message.includes('GTIN') || error.message.includes('c√≥digo')) {
        errorMessage = error.message
      } else if (error.message.includes('comunica√ß√£o')) {
        errorMessage = 'Falha na comunica√ß√£o com o servidor. Verifique sua conex√£o e tente novamente.'
      } else if (error.message.includes('temporariamente indispon√≠vel')) {
        errorMessage = 'Servi√ßo temporariamente indispon√≠vel. Aguarde alguns minutos e tente novamente.'
      } else if (error.message.includes('API SEFAZ')) {
        errorMessage = error.message
      } else if (error.message.includes('dados inv√°lidos')) {
        errorMessage = 'Os dados informados s√£o inv√°lidos. Verifique os crit√©rios de busca.'
      } else if (error.message.includes('autentica√ß√£o')) {
        errorMessage = 'Erro de autentica√ß√£o. Entre em contato com o suporte t√©cnico.'
      } else {
        errorMessage = `Erro na busca: ${error.message}`
      }
      
      console.error('üì¢ Mensagem de erro para usu√°rio:', errorMessage)
      toast({
        title: "Erro na Busca",
        description: errorMessage,
        variant: "destructive",
      })
    },
    onSuccess: (data) => {
      console.log('‚úÖ Busca de produtos bem-sucedida:', {
        totalRegistros: data.totalRegistros,
        totalPaginas: data.totalPaginas,
        pagina: data.pagina,
        quantidadeItens: data.conteudo.length
      })
      
      if (data.totalRegistros === 0) {
        toast({
          title: "Nenhum resultado",
          description: "Nenhum produto encontrado com os crit√©rios informados",
        })
      } else {
        toast({
          title: "Busca realizada",
          description: `${data.totalRegistros} produto(s) encontrado(s)`,
        })
        
        // Log de alguns produtos encontrados para debug
        if (data.conteudo.length > 0) {
          console.log('üì¶ Exemplo de produto encontrado:', {
            descricao: data.conteudo[0].produto.descricao,
            gtin: data.conteudo[0].produto.gtin,
            estabelecimento: data.conteudo[0].estabelecimento.nomeFantasia || data.conteudo[0].estabelecimento.razaoSocial,
            preco: data.conteudo[0].produto.venda.valorVenda
          })
        }
      }
    }
  })
}

export function useFuelSearch() {
  const { toast } = useToast()
  const { saveSearch } = useSearchHistory()
  const { consumeCredit, hasCredits, isAdmin } = useUserCredits()

  return useMutation({
    mutationFn: async (params: FuelSearchParams) => {
      console.log('=== INICIANDO BUSCA DE COMBUST√çVEIS ===')
      console.log('Par√¢metros recebidos:', JSON.stringify(params, null, 2))
      console.log('üîç Verificando status de admin:', isAdmin)
      
      // Check if user is admin first - admins don't need credit consumption
      if (!isAdmin) {
        console.log('üîç Usu√°rio n√£o √© admin, verificando cr√©ditos...')
        
        // For non-admin users, consume credit
        const creditConsumed = await consumeCredit('Busca de combust√≠vel')
        if (!creditConsumed) {
          // Check if user has credits for better error message
          if (!hasCredits()) {
            throw new Error('INSUFFICIENT_CREDITS')
          }
          throw new Error('CREDIT_CONSUMPTION_FAILED')
        }
        
        console.log('‚úÖ Cr√©dito processado com sucesso, prosseguindo com busca...')
      } else {
        console.log('‚úÖ Usu√°rio √© admin, pulando verifica√ß√£o de cr√©ditos')
      }

      // Proceed with the search
      
      // Validar c√≥digo IBGE se fornecido
      if (params.estabelecimento.municipio?.codigoIBGE && typeof params.estabelecimento.municipio.codigoIBGE === 'string') {
        const codigo = params.estabelecimento.municipio.codigoIBGE.replace(/\D/g, '')
        if (codigo.length !== 7) {
          throw new Error('C√≥digo IBGE deve ter exatamente 7 d√≠gitos num√©ricos')
        }
        console.log('‚úÖ C√≥digo IBGE validado:', codigo)
      }

      console.log('‚úÖ Valida√ß√µes conclu√≠das, iniciando chamada para API...')
      return callSefazAPI('combustivel/pesquisa', params)
    },
    onError: (error: Error) => {
      console.error('‚ùå Erro na busca de combust√≠veis:', error)
      
      let errorMessage = 'Erro desconhecido na busca'
      
      if (error.message === 'INSUFFICIENT_CREDITS') {
        toast({
          title: "Cr√©ditos Insuficientes",
          description: "Voc√™ n√£o possui cr√©ditos suficientes para realizar esta busca.",
          variant: "destructive",
        })
        return
      } else if (error.message === 'CREDIT_CONSUMPTION_FAILED') {
        toast({
          title: "Erro no Sistema de Cr√©ditos",
          description: "N√£o foi poss√≠vel processar seus cr√©ditos. Tente novamente.",
          variant: "destructive",
        })
        return
      }
      
      // Mensagens espec√≠ficas para diagn√≥sticos cr√≠ticos
      if (error.message.includes('üö®')) {
        errorMessage = error.message // J√° formatada com emoji de alerta
      } else if (error.message.includes('conectar com o servidor')) {
        errorMessage = 'N√£o foi poss√≠vel conectar com o servidor. Verifique sua conex√£o e tente novamente.'
      } else if (error.message.includes('c√≥digo IBGE')) {
        errorMessage = error.message
      } else if (error.message.includes('comunica√ß√£o')) {
        errorMessage = 'Falha na comunica√ß√£o com o servidor. Verifique sua conex√£o e tente novamente.'
      } else if (error.message.includes('temporariamente indispon√≠vel')) {
        errorMessage = 'Servi√ßo temporariamente indispon√≠vel. Aguarde alguns minutos e tente novamente.'
      } else if (error.message.includes('API SEFAZ')) {
        errorMessage = error.message
      } else if (error.message.includes('dados inv√°lidos')) {
        errorMessage = 'Os dados informados s√£o inv√°lidos. Verifique os crit√©rios de busca.'
      } else if (error.message.includes('autentica√ß√£o')) {
        errorMessage = 'Erro de autentica√ß√£o. Entre em contato com o suporte t√©cnico.'
      } else {
        errorMessage = `Erro na busca: ${error.message}`
      }
      
      console.error('üì¢ Mensagem de erro para usu√°rio:', errorMessage)
      toast({
        title: "Erro na Busca",
        description: errorMessage,
        variant: "destructive",
      })
    },
    onSuccess: (data) => {
      console.log('‚úÖ Busca de combust√≠veis bem-sucedida:', {
        totalRegistros: data.totalRegistros,
        totalPaginas: data.totalPaginas,
        pagina: data.pagina,
        quantidadeItens: data.conteudo.length
      })
      
      if (data.totalRegistros === 0) {
        toast({
          title: "Nenhum resultado",
          description: "Nenhum combust√≠vel encontrado com os crit√©rios informados",
        })
      } else {
        toast({
          title: "Busca realizada",
          description: `${data.totalRegistros} resultado(s) encontrado(s)`,
        })
        
        // Log de alguns combust√≠veis encontrados para debug
        if (data.conteudo.length > 0) {
          console.log('‚õΩ Exemplo de combust√≠vel encontrado:', {
            descricao: data.conteudo[0].produto.descricao,
            estabelecimento: data.conteudo[0].estabelecimento.nomeFantasia || data.conteudo[0].estabelecimento.razaoSocial,
            preco: data.conteudo[0].produto.venda.valorVenda
          })
        }
      }
    }
  })
}
